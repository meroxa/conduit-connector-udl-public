// Code generated by MockGen. DO NOT EDIT.
// Source: udl/udl.gen.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	udl "github.com/meroxa/conduit-connector-udl/udl"
)

// MockHttpRequestDoer is a mock of HttpRequestDoer interface.
type MockHttpRequestDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRequestDoerMockRecorder
}

// MockHttpRequestDoerMockRecorder is the mock recorder for MockHttpRequestDoer.
type MockHttpRequestDoerMockRecorder struct {
	mock *MockHttpRequestDoer
}

// NewMockHttpRequestDoer creates a new mock instance.
func NewMockHttpRequestDoer(ctrl *gomock.Controller) *MockHttpRequestDoer {
	mock := &MockHttpRequestDoer{ctrl: ctrl}
	mock.recorder = &MockHttpRequestDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpRequestDoer) EXPECT() *MockHttpRequestDoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpRequestDoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpRequestDoerMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpRequestDoer)(nil).Do), req)
}

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// CountDuplicate3 mocks base method.
func (m *MockClientInterface) CountDuplicate3(ctx context.Context, params *udl.CountDuplicate3Params, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountDuplicate3", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountDuplicate3 indicates an expected call of CountDuplicate3.
func (mr *MockClientInterfaceMockRecorder) CountDuplicate3(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDuplicate3", reflect.TypeOf((*MockClientInterface)(nil).CountDuplicate3), varargs...)
}

// CountHistory12 mocks base method.
func (m *MockClientInterface) CountHistory12(ctx context.Context, params *udl.CountHistory12Params, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountHistory12", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountHistory12 indicates an expected call of CountHistory12.
func (mr *MockClientInterfaceMockRecorder) CountHistory12(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountHistory12", reflect.TypeOf((*MockClientInterface)(nil).CountHistory12), varargs...)
}

// CountHistory13 mocks base method.
func (m *MockClientInterface) CountHistory13(ctx context.Context, params *udl.CountHistory13Params, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountHistory13", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountHistory13 indicates an expected call of CountHistory13.
func (mr *MockClientInterfaceMockRecorder) CountHistory13(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountHistory13", reflect.TypeOf((*MockClientInterface)(nil).CountHistory13), varargs...)
}

// CountHistory14 mocks base method.
func (m *MockClientInterface) CountHistory14(ctx context.Context, params *udl.CountHistory14Params, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountHistory14", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountHistory14 indicates an expected call of CountHistory14.
func (mr *MockClientInterfaceMockRecorder) CountHistory14(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountHistory14", reflect.TypeOf((*MockClientInterface)(nil).CountHistory14), varargs...)
}

// CountREST23 mocks base method.
func (m *MockClientInterface) CountREST23(ctx context.Context, params *udl.CountREST23Params, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountREST23", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountREST23 indicates an expected call of CountREST23.
func (mr *MockClientInterfaceMockRecorder) CountREST23(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountREST23", reflect.TypeOf((*MockClientInterface)(nil).CountREST23), varargs...)
}

// CountREST26 mocks base method.
func (m *MockClientInterface) CountREST26(ctx context.Context, params *udl.CountREST26Params, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountREST26", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountREST26 indicates an expected call of CountREST26.
func (mr *MockClientInterfaceMockRecorder) CountREST26(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountREST26", reflect.TypeOf((*MockClientInterface)(nil).CountREST26), varargs...)
}

// Create25 mocks base method.
func (m *MockClientInterface) Create25(ctx context.Context, body udl.Create25JSONRequestBody, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create25", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create25 indicates an expected call of Create25.
func (mr *MockClientInterfaceMockRecorder) Create25(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create25", reflect.TypeOf((*MockClientInterface)(nil).Create25), varargs...)
}

// Create25WithBody mocks base method.
func (m *MockClientInterface) Create25WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create25WithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create25WithBody indicates an expected call of Create25WithBody.
func (mr *MockClientInterfaceMockRecorder) Create25WithBody(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create25WithBody", reflect.TypeOf((*MockClientInterface)(nil).Create25WithBody), varargs...)
}

// Create29 mocks base method.
func (m *MockClientInterface) Create29(ctx context.Context, body udl.Create29JSONRequestBody, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create29", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create29 indicates an expected call of Create29.
func (mr *MockClientInterfaceMockRecorder) Create29(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create29", reflect.TypeOf((*MockClientInterface)(nil).Create29), varargs...)
}

// Create29WithBody mocks base method.
func (m *MockClientInterface) Create29WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create29WithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create29WithBody indicates an expected call of Create29WithBody.
func (mr *MockClientInterfaceMockRecorder) Create29WithBody(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create29WithBody", reflect.TypeOf((*MockClientInterface)(nil).Create29WithBody), varargs...)
}

// CreateBulkFromTLEWithBody mocks base method.
func (m *MockClientInterface) CreateBulkFromTLEWithBody(ctx context.Context, params *udl.CreateBulkFromTLEParams, contentType string, body io.Reader, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBulkFromTLEWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBulkFromTLEWithBody indicates an expected call of CreateBulkFromTLEWithBody.
func (mr *MockClientInterfaceMockRecorder) CreateBulkFromTLEWithBody(ctx, params, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBulkFromTLEWithBody", reflect.TypeOf((*MockClientInterface)(nil).CreateBulkFromTLEWithBody), varargs...)
}

// CreateBulks8 mocks base method.
func (m *MockClientInterface) CreateBulks8(ctx context.Context, params *udl.CreateBulks8Params, body udl.CreateBulks8JSONRequestBody, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBulks8", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBulks8 indicates an expected call of CreateBulks8.
func (mr *MockClientInterfaceMockRecorder) CreateBulks8(ctx, params, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBulks8", reflect.TypeOf((*MockClientInterface)(nil).CreateBulks8), varargs...)
}

// CreateBulks8WithBody mocks base method.
func (m *MockClientInterface) CreateBulks8WithBody(ctx context.Context, params *udl.CreateBulks8Params, contentType string, body io.Reader, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBulks8WithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBulks8WithBody indicates an expected call of CreateBulks8WithBody.
func (mr *MockClientInterfaceMockRecorder) CreateBulks8WithBody(ctx, params, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBulks8WithBody", reflect.TypeOf((*MockClientInterface)(nil).CreateBulks8WithBody), varargs...)
}

// Current mocks base method.
func (m *MockClientInterface) Current(ctx context.Context, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Current", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Current indicates an expected call of Current.
func (mr *MockClientInterfaceMockRecorder) Current(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockClientInterface)(nil).Current), varargs...)
}

// CurrentTuple mocks base method.
func (m *MockClientInterface) CurrentTuple(ctx context.Context, params *udl.CurrentTupleParams, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CurrentTuple", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentTuple indicates an expected call of CurrentTuple.
func (mr *MockClientInterfaceMockRecorder) CurrentTuple(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentTuple", reflect.TypeOf((*MockClientInterface)(nil).CurrentTuple), varargs...)
}

// FiledropEphemPostIdWithBody mocks base method.
func (m *MockClientInterface) FiledropEphemPostIdWithBody(ctx context.Context, params *udl.FiledropEphemPostIdParams, contentType string, body io.Reader, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FiledropEphemPostIdWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FiledropEphemPostIdWithBody indicates an expected call of FiledropEphemPostIdWithBody.
func (mr *MockClientInterfaceMockRecorder) FiledropEphemPostIdWithBody(ctx, params, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FiledropEphemPostIdWithBody", reflect.TypeOf((*MockClientInterface)(nil).FiledropEphemPostIdWithBody), varargs...)
}

// FiledropUdlElsetPostId mocks base method.
func (m *MockClientInterface) FiledropUdlElsetPostId(ctx context.Context, body udl.FiledropUdlElsetPostIdJSONRequestBody, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FiledropUdlElsetPostId", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FiledropUdlElsetPostId indicates an expected call of FiledropUdlElsetPostId.
func (mr *MockClientInterfaceMockRecorder) FiledropUdlElsetPostId(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FiledropUdlElsetPostId", reflect.TypeOf((*MockClientInterface)(nil).FiledropUdlElsetPostId), varargs...)
}

// FiledropUdlElsetPostIdWithBody mocks base method.
func (m *MockClientInterface) FiledropUdlElsetPostIdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FiledropUdlElsetPostIdWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FiledropUdlElsetPostIdWithBody indicates an expected call of FiledropUdlElsetPostIdWithBody.
func (mr *MockClientInterfaceMockRecorder) FiledropUdlElsetPostIdWithBody(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FiledropUdlElsetPostIdWithBody", reflect.TypeOf((*MockClientInterface)(nil).FiledropUdlElsetPostIdWithBody), varargs...)
}

// FiledropUdlEphsetPostId mocks base method.
func (m *MockClientInterface) FiledropUdlEphsetPostId(ctx context.Context, body udl.FiledropUdlEphsetPostIdJSONRequestBody, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FiledropUdlEphsetPostId", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FiledropUdlEphsetPostId indicates an expected call of FiledropUdlEphsetPostId.
func (mr *MockClientInterfaceMockRecorder) FiledropUdlEphsetPostId(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FiledropUdlEphsetPostId", reflect.TypeOf((*MockClientInterface)(nil).FiledropUdlEphsetPostId), varargs...)
}

// FiledropUdlEphsetPostIdWithBody mocks base method.
func (m *MockClientInterface) FiledropUdlEphsetPostIdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FiledropUdlEphsetPostIdWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FiledropUdlEphsetPostIdWithBody indicates an expected call of FiledropUdlEphsetPostIdWithBody.
func (mr *MockClientInterfaceMockRecorder) FiledropUdlEphsetPostIdWithBody(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FiledropUdlEphsetPostIdWithBody", reflect.TypeOf((*MockClientInterface)(nil).FiledropUdlEphsetPostIdWithBody), varargs...)
}

// Find24 mocks base method.
func (m *MockClientInterface) Find24(ctx context.Context, id string, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find24", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find24 indicates an expected call of Find24.
func (mr *MockClientInterfaceMockRecorder) Find24(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find24", reflect.TypeOf((*MockClientInterface)(nil).Find24), varargs...)
}

// Find28 mocks base method.
func (m *MockClientInterface) Find28(ctx context.Context, id string, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find28", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find28 indicates an expected call of Find28.
func (mr *MockClientInterfaceMockRecorder) Find28(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find28", reflect.TypeOf((*MockClientInterface)(nil).Find28), varargs...)
}

// FindAllHistory12 mocks base method.
func (m *MockClientInterface) FindAllHistory12(ctx context.Context, params *udl.FindAllHistory12Params, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllHistory12", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllHistory12 indicates an expected call of FindAllHistory12.
func (mr *MockClientInterfaceMockRecorder) FindAllHistory12(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllHistory12", reflect.TypeOf((*MockClientInterface)(nil).FindAllHistory12), varargs...)
}

// FindAllHistory13 mocks base method.
func (m *MockClientInterface) FindAllHistory13(ctx context.Context, params *udl.FindAllHistory13Params, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllHistory13", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllHistory13 indicates an expected call of FindAllHistory13.
func (mr *MockClientInterfaceMockRecorder) FindAllHistory13(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllHistory13", reflect.TypeOf((*MockClientInterface)(nil).FindAllHistory13), varargs...)
}

// FindAllHistory14 mocks base method.
func (m *MockClientInterface) FindAllHistory14(ctx context.Context, params *udl.FindAllHistory14Params, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllHistory14", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllHistory14 indicates an expected call of FindAllHistory14.
func (mr *MockClientInterfaceMockRecorder) FindAllHistory14(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllHistory14", reflect.TypeOf((*MockClientInterface)(nil).FindAllHistory14), varargs...)
}

// FindAllHistoryAodr12 mocks base method.
func (m *MockClientInterface) FindAllHistoryAodr12(ctx context.Context, params *udl.FindAllHistoryAodr12Params, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllHistoryAodr12", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllHistoryAodr12 indicates an expected call of FindAllHistoryAodr12.
func (mr *MockClientInterfaceMockRecorder) FindAllHistoryAodr12(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllHistoryAodr12", reflect.TypeOf((*MockClientInterface)(nil).FindAllHistoryAodr12), varargs...)
}

// FindAllHistoryAodr13 mocks base method.
func (m *MockClientInterface) FindAllHistoryAodr13(ctx context.Context, params *udl.FindAllHistoryAodr13Params, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllHistoryAodr13", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllHistoryAodr13 indicates an expected call of FindAllHistoryAodr13.
func (mr *MockClientInterfaceMockRecorder) FindAllHistoryAodr13(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllHistoryAodr13", reflect.TypeOf((*MockClientInterface)(nil).FindAllHistoryAodr13), varargs...)
}

// FindAllHistoryAodr14 mocks base method.
func (m *MockClientInterface) FindAllHistoryAodr14(ctx context.Context, params *udl.FindAllHistoryAodr14Params, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllHistoryAodr14", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllHistoryAodr14 indicates an expected call of FindAllHistoryAodr14.
func (mr *MockClientInterfaceMockRecorder) FindAllHistoryAodr14(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllHistoryAodr14", reflect.TypeOf((*MockClientInterface)(nil).FindAllHistoryAodr14), varargs...)
}

// FindAllTuples25 mocks base method.
func (m *MockClientInterface) FindAllTuples25(ctx context.Context, params *udl.FindAllTuples25Params, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllTuples25", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTuples25 indicates an expected call of FindAllTuples25.
func (mr *MockClientInterfaceMockRecorder) FindAllTuples25(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTuples25", reflect.TypeOf((*MockClientInterface)(nil).FindAllTuples25), varargs...)
}

// FindAllTuples28 mocks base method.
func (m *MockClientInterface) FindAllTuples28(ctx context.Context, params *udl.FindAllTuples28Params, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllTuples28", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTuples28 indicates an expected call of FindAllTuples28.
func (mr *MockClientInterfaceMockRecorder) FindAllTuples28(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTuples28", reflect.TypeOf((*MockClientInterface)(nil).FindAllTuples28), varargs...)
}

// FindAllTuples29 mocks base method.
func (m *MockClientInterface) FindAllTuples29(ctx context.Context, params *udl.FindAllTuples29Params, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllTuples29", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTuples29 indicates an expected call of FindAllTuples29.
func (mr *MockClientInterfaceMockRecorder) FindAllTuples29(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTuples29", reflect.TypeOf((*MockClientInterface)(nil).FindAllTuples29), varargs...)
}

// FindAllWithStream6 mocks base method.
func (m *MockClientInterface) FindAllWithStream6(ctx context.Context, params *udl.FindAllWithStream6Params, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllWithStream6", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllWithStream6 indicates an expected call of FindAllWithStream6.
func (mr *MockClientInterfaceMockRecorder) FindAllWithStream6(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllWithStream6", reflect.TypeOf((*MockClientInterface)(nil).FindAllWithStream6), varargs...)
}

// FindAllWithStream7 mocks base method.
func (m *MockClientInterface) FindAllWithStream7(ctx context.Context, params *udl.FindAllWithStream7Params, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllWithStream7", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllWithStream7 indicates an expected call of FindAllWithStream7.
func (mr *MockClientInterfaceMockRecorder) FindAllWithStream7(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllWithStream7", reflect.TypeOf((*MockClientInterface)(nil).FindAllWithStream7), varargs...)
}

// FindAllWithStream8 mocks base method.
func (m *MockClientInterface) FindAllWithStream8(ctx context.Context, params *udl.FindAllWithStream8Params, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllWithStream8", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllWithStream8 indicates an expected call of FindAllWithStream8.
func (mr *MockClientInterfaceMockRecorder) FindAllWithStream8(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllWithStream8", reflect.TypeOf((*MockClientInterface)(nil).FindAllWithStream8), varargs...)
}

// GetFile1 mocks base method.
func (m *MockClientInterface) GetFile1(ctx context.Context, id string, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFile1", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile1 indicates an expected call of GetFile1.
func (mr *MockClientInterfaceMockRecorder) GetFile1(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile1", reflect.TypeOf((*MockClientInterface)(nil).GetFile1), varargs...)
}

// Queryhelp26 mocks base method.
func (m *MockClientInterface) Queryhelp26(ctx context.Context, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Queryhelp26", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Queryhelp26 indicates an expected call of Queryhelp26.
func (mr *MockClientInterfaceMockRecorder) Queryhelp26(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Queryhelp26", reflect.TypeOf((*MockClientInterface)(nil).Queryhelp26), varargs...)
}

// Queryhelp29 mocks base method.
func (m *MockClientInterface) Queryhelp29(ctx context.Context, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Queryhelp29", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Queryhelp29 indicates an expected call of Queryhelp29.
func (mr *MockClientInterfaceMockRecorder) Queryhelp29(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Queryhelp29", reflect.TypeOf((*MockClientInterface)(nil).Queryhelp29), varargs...)
}

// Queryhelp30 mocks base method.
func (m *MockClientInterface) Queryhelp30(ctx context.Context, reqEditors ...udl.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Queryhelp30", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Queryhelp30 indicates an expected call of Queryhelp30.
func (mr *MockClientInterfaceMockRecorder) Queryhelp30(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Queryhelp30", reflect.TypeOf((*MockClientInterface)(nil).Queryhelp30), varargs...)
}

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// CountDuplicate3WithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CountDuplicate3WithResponse(ctx context.Context, params *udl.CountDuplicate3Params, reqEditors ...udl.RequestEditorFn) (*udl.CountDuplicate3Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountDuplicate3WithResponse", varargs...)
	ret0, _ := ret[0].(*udl.CountDuplicate3Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountDuplicate3WithResponse indicates an expected call of CountDuplicate3WithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CountDuplicate3WithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDuplicate3WithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CountDuplicate3WithResponse), varargs...)
}

// CountHistory12WithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CountHistory12WithResponse(ctx context.Context, params *udl.CountHistory12Params, reqEditors ...udl.RequestEditorFn) (*udl.CountHistory12Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountHistory12WithResponse", varargs...)
	ret0, _ := ret[0].(*udl.CountHistory12Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountHistory12WithResponse indicates an expected call of CountHistory12WithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CountHistory12WithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountHistory12WithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CountHistory12WithResponse), varargs...)
}

// CountHistory13WithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CountHistory13WithResponse(ctx context.Context, params *udl.CountHistory13Params, reqEditors ...udl.RequestEditorFn) (*udl.CountHistory13Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountHistory13WithResponse", varargs...)
	ret0, _ := ret[0].(*udl.CountHistory13Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountHistory13WithResponse indicates an expected call of CountHistory13WithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CountHistory13WithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountHistory13WithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CountHistory13WithResponse), varargs...)
}

// CountHistory14WithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CountHistory14WithResponse(ctx context.Context, params *udl.CountHistory14Params, reqEditors ...udl.RequestEditorFn) (*udl.CountHistory14Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountHistory14WithResponse", varargs...)
	ret0, _ := ret[0].(*udl.CountHistory14Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountHistory14WithResponse indicates an expected call of CountHistory14WithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CountHistory14WithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountHistory14WithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CountHistory14WithResponse), varargs...)
}

// CountREST23WithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CountREST23WithResponse(ctx context.Context, params *udl.CountREST23Params, reqEditors ...udl.RequestEditorFn) (*udl.CountREST23Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountREST23WithResponse", varargs...)
	ret0, _ := ret[0].(*udl.CountREST23Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountREST23WithResponse indicates an expected call of CountREST23WithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CountREST23WithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountREST23WithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CountREST23WithResponse), varargs...)
}

// CountREST26WithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CountREST26WithResponse(ctx context.Context, params *udl.CountREST26Params, reqEditors ...udl.RequestEditorFn) (*udl.CountREST26Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountREST26WithResponse", varargs...)
	ret0, _ := ret[0].(*udl.CountREST26Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountREST26WithResponse indicates an expected call of CountREST26WithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CountREST26WithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountREST26WithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CountREST26WithResponse), varargs...)
}

// Create25WithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) Create25WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...udl.RequestEditorFn) (*udl.Create25Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create25WithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*udl.Create25Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create25WithBodyWithResponse indicates an expected call of Create25WithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) Create25WithBodyWithResponse(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create25WithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).Create25WithBodyWithResponse), varargs...)
}

// Create25WithResponse mocks base method.
func (m *MockClientWithResponsesInterface) Create25WithResponse(ctx context.Context, body udl.Create25JSONRequestBody, reqEditors ...udl.RequestEditorFn) (*udl.Create25Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create25WithResponse", varargs...)
	ret0, _ := ret[0].(*udl.Create25Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create25WithResponse indicates an expected call of Create25WithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) Create25WithResponse(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create25WithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).Create25WithResponse), varargs...)
}

// Create29WithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) Create29WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...udl.RequestEditorFn) (*udl.Create29Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create29WithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*udl.Create29Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create29WithBodyWithResponse indicates an expected call of Create29WithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) Create29WithBodyWithResponse(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create29WithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).Create29WithBodyWithResponse), varargs...)
}

// Create29WithResponse mocks base method.
func (m *MockClientWithResponsesInterface) Create29WithResponse(ctx context.Context, body udl.Create29JSONRequestBody, reqEditors ...udl.RequestEditorFn) (*udl.Create29Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create29WithResponse", varargs...)
	ret0, _ := ret[0].(*udl.Create29Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create29WithResponse indicates an expected call of Create29WithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) Create29WithResponse(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create29WithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).Create29WithResponse), varargs...)
}

// CreateBulkFromTLEWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateBulkFromTLEWithBodyWithResponse(ctx context.Context, params *udl.CreateBulkFromTLEParams, contentType string, body io.Reader, reqEditors ...udl.RequestEditorFn) (*udl.CreateBulkFromTLEResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBulkFromTLEWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*udl.CreateBulkFromTLEResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBulkFromTLEWithBodyWithResponse indicates an expected call of CreateBulkFromTLEWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateBulkFromTLEWithBodyWithResponse(ctx, params, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBulkFromTLEWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateBulkFromTLEWithBodyWithResponse), varargs...)
}

// CreateBulks8WithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateBulks8WithBodyWithResponse(ctx context.Context, params *udl.CreateBulks8Params, contentType string, body io.Reader, reqEditors ...udl.RequestEditorFn) (*udl.CreateBulks8Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBulks8WithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*udl.CreateBulks8Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBulks8WithBodyWithResponse indicates an expected call of CreateBulks8WithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateBulks8WithBodyWithResponse(ctx, params, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBulks8WithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateBulks8WithBodyWithResponse), varargs...)
}

// CreateBulks8WithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateBulks8WithResponse(ctx context.Context, params *udl.CreateBulks8Params, body udl.CreateBulks8JSONRequestBody, reqEditors ...udl.RequestEditorFn) (*udl.CreateBulks8Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBulks8WithResponse", varargs...)
	ret0, _ := ret[0].(*udl.CreateBulks8Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBulks8WithResponse indicates an expected call of CreateBulks8WithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateBulks8WithResponse(ctx, params, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBulks8WithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateBulks8WithResponse), varargs...)
}

// CurrentTupleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CurrentTupleWithResponse(ctx context.Context, params *udl.CurrentTupleParams, reqEditors ...udl.RequestEditorFn) (*udl.CurrentTupleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CurrentTupleWithResponse", varargs...)
	ret0, _ := ret[0].(*udl.CurrentTupleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentTupleWithResponse indicates an expected call of CurrentTupleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CurrentTupleWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentTupleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CurrentTupleWithResponse), varargs...)
}

// CurrentWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CurrentWithResponse(ctx context.Context, reqEditors ...udl.RequestEditorFn) (*udl.CurrentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CurrentWithResponse", varargs...)
	ret0, _ := ret[0].(*udl.CurrentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentWithResponse indicates an expected call of CurrentWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CurrentWithResponse(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CurrentWithResponse), varargs...)
}

// FiledropEphemPostIdWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) FiledropEphemPostIdWithBodyWithResponse(ctx context.Context, params *udl.FiledropEphemPostIdParams, contentType string, body io.Reader, reqEditors ...udl.RequestEditorFn) (*udl.FiledropEphemPostIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FiledropEphemPostIdWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*udl.FiledropEphemPostIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FiledropEphemPostIdWithBodyWithResponse indicates an expected call of FiledropEphemPostIdWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) FiledropEphemPostIdWithBodyWithResponse(ctx, params, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FiledropEphemPostIdWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).FiledropEphemPostIdWithBodyWithResponse), varargs...)
}

// FiledropUdlElsetPostIdWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) FiledropUdlElsetPostIdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...udl.RequestEditorFn) (*udl.FiledropUdlElsetPostIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FiledropUdlElsetPostIdWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*udl.FiledropUdlElsetPostIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FiledropUdlElsetPostIdWithBodyWithResponse indicates an expected call of FiledropUdlElsetPostIdWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) FiledropUdlElsetPostIdWithBodyWithResponse(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FiledropUdlElsetPostIdWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).FiledropUdlElsetPostIdWithBodyWithResponse), varargs...)
}

// FiledropUdlElsetPostIdWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) FiledropUdlElsetPostIdWithResponse(ctx context.Context, body udl.FiledropUdlElsetPostIdJSONRequestBody, reqEditors ...udl.RequestEditorFn) (*udl.FiledropUdlElsetPostIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FiledropUdlElsetPostIdWithResponse", varargs...)
	ret0, _ := ret[0].(*udl.FiledropUdlElsetPostIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FiledropUdlElsetPostIdWithResponse indicates an expected call of FiledropUdlElsetPostIdWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) FiledropUdlElsetPostIdWithResponse(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FiledropUdlElsetPostIdWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).FiledropUdlElsetPostIdWithResponse), varargs...)
}

// FiledropUdlEphsetPostIdWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) FiledropUdlEphsetPostIdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...udl.RequestEditorFn) (*udl.FiledropUdlEphsetPostIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FiledropUdlEphsetPostIdWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*udl.FiledropUdlEphsetPostIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FiledropUdlEphsetPostIdWithBodyWithResponse indicates an expected call of FiledropUdlEphsetPostIdWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) FiledropUdlEphsetPostIdWithBodyWithResponse(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FiledropUdlEphsetPostIdWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).FiledropUdlEphsetPostIdWithBodyWithResponse), varargs...)
}

// FiledropUdlEphsetPostIdWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) FiledropUdlEphsetPostIdWithResponse(ctx context.Context, body udl.FiledropUdlEphsetPostIdJSONRequestBody, reqEditors ...udl.RequestEditorFn) (*udl.FiledropUdlEphsetPostIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FiledropUdlEphsetPostIdWithResponse", varargs...)
	ret0, _ := ret[0].(*udl.FiledropUdlEphsetPostIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FiledropUdlEphsetPostIdWithResponse indicates an expected call of FiledropUdlEphsetPostIdWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) FiledropUdlEphsetPostIdWithResponse(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FiledropUdlEphsetPostIdWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).FiledropUdlEphsetPostIdWithResponse), varargs...)
}

// Find24WithResponse mocks base method.
func (m *MockClientWithResponsesInterface) Find24WithResponse(ctx context.Context, id string, reqEditors ...udl.RequestEditorFn) (*udl.Find24Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find24WithResponse", varargs...)
	ret0, _ := ret[0].(*udl.Find24Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find24WithResponse indicates an expected call of Find24WithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) Find24WithResponse(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find24WithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).Find24WithResponse), varargs...)
}

// Find28WithResponse mocks base method.
func (m *MockClientWithResponsesInterface) Find28WithResponse(ctx context.Context, id string, reqEditors ...udl.RequestEditorFn) (*udl.Find28Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find28WithResponse", varargs...)
	ret0, _ := ret[0].(*udl.Find28Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find28WithResponse indicates an expected call of Find28WithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) Find28WithResponse(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find28WithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).Find28WithResponse), varargs...)
}

// FindAllHistory12WithResponse mocks base method.
func (m *MockClientWithResponsesInterface) FindAllHistory12WithResponse(ctx context.Context, params *udl.FindAllHistory12Params, reqEditors ...udl.RequestEditorFn) (*udl.FindAllHistory12Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllHistory12WithResponse", varargs...)
	ret0, _ := ret[0].(*udl.FindAllHistory12Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllHistory12WithResponse indicates an expected call of FindAllHistory12WithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) FindAllHistory12WithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllHistory12WithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).FindAllHistory12WithResponse), varargs...)
}

// FindAllHistory13WithResponse mocks base method.
func (m *MockClientWithResponsesInterface) FindAllHistory13WithResponse(ctx context.Context, params *udl.FindAllHistory13Params, reqEditors ...udl.RequestEditorFn) (*udl.FindAllHistory13Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllHistory13WithResponse", varargs...)
	ret0, _ := ret[0].(*udl.FindAllHistory13Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllHistory13WithResponse indicates an expected call of FindAllHistory13WithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) FindAllHistory13WithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllHistory13WithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).FindAllHistory13WithResponse), varargs...)
}

// FindAllHistory14WithResponse mocks base method.
func (m *MockClientWithResponsesInterface) FindAllHistory14WithResponse(ctx context.Context, params *udl.FindAllHistory14Params, reqEditors ...udl.RequestEditorFn) (*udl.FindAllHistory14Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllHistory14WithResponse", varargs...)
	ret0, _ := ret[0].(*udl.FindAllHistory14Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllHistory14WithResponse indicates an expected call of FindAllHistory14WithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) FindAllHistory14WithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllHistory14WithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).FindAllHistory14WithResponse), varargs...)
}

// FindAllHistoryAodr12WithResponse mocks base method.
func (m *MockClientWithResponsesInterface) FindAllHistoryAodr12WithResponse(ctx context.Context, params *udl.FindAllHistoryAodr12Params, reqEditors ...udl.RequestEditorFn) (*udl.FindAllHistoryAodr12Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllHistoryAodr12WithResponse", varargs...)
	ret0, _ := ret[0].(*udl.FindAllHistoryAodr12Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllHistoryAodr12WithResponse indicates an expected call of FindAllHistoryAodr12WithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) FindAllHistoryAodr12WithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllHistoryAodr12WithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).FindAllHistoryAodr12WithResponse), varargs...)
}

// FindAllHistoryAodr13WithResponse mocks base method.
func (m *MockClientWithResponsesInterface) FindAllHistoryAodr13WithResponse(ctx context.Context, params *udl.FindAllHistoryAodr13Params, reqEditors ...udl.RequestEditorFn) (*udl.FindAllHistoryAodr13Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllHistoryAodr13WithResponse", varargs...)
	ret0, _ := ret[0].(*udl.FindAllHistoryAodr13Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllHistoryAodr13WithResponse indicates an expected call of FindAllHistoryAodr13WithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) FindAllHistoryAodr13WithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllHistoryAodr13WithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).FindAllHistoryAodr13WithResponse), varargs...)
}

// FindAllHistoryAodr14WithResponse mocks base method.
func (m *MockClientWithResponsesInterface) FindAllHistoryAodr14WithResponse(ctx context.Context, params *udl.FindAllHistoryAodr14Params, reqEditors ...udl.RequestEditorFn) (*udl.FindAllHistoryAodr14Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllHistoryAodr14WithResponse", varargs...)
	ret0, _ := ret[0].(*udl.FindAllHistoryAodr14Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllHistoryAodr14WithResponse indicates an expected call of FindAllHistoryAodr14WithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) FindAllHistoryAodr14WithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllHistoryAodr14WithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).FindAllHistoryAodr14WithResponse), varargs...)
}

// FindAllTuples25WithResponse mocks base method.
func (m *MockClientWithResponsesInterface) FindAllTuples25WithResponse(ctx context.Context, params *udl.FindAllTuples25Params, reqEditors ...udl.RequestEditorFn) (*udl.FindAllTuples25Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllTuples25WithResponse", varargs...)
	ret0, _ := ret[0].(*udl.FindAllTuples25Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTuples25WithResponse indicates an expected call of FindAllTuples25WithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) FindAllTuples25WithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTuples25WithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).FindAllTuples25WithResponse), varargs...)
}

// FindAllTuples28WithResponse mocks base method.
func (m *MockClientWithResponsesInterface) FindAllTuples28WithResponse(ctx context.Context, params *udl.FindAllTuples28Params, reqEditors ...udl.RequestEditorFn) (*udl.FindAllTuples28Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllTuples28WithResponse", varargs...)
	ret0, _ := ret[0].(*udl.FindAllTuples28Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTuples28WithResponse indicates an expected call of FindAllTuples28WithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) FindAllTuples28WithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTuples28WithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).FindAllTuples28WithResponse), varargs...)
}

// FindAllTuples29WithResponse mocks base method.
func (m *MockClientWithResponsesInterface) FindAllTuples29WithResponse(ctx context.Context, params *udl.FindAllTuples29Params, reqEditors ...udl.RequestEditorFn) (*udl.FindAllTuples29Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllTuples29WithResponse", varargs...)
	ret0, _ := ret[0].(*udl.FindAllTuples29Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTuples29WithResponse indicates an expected call of FindAllTuples29WithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) FindAllTuples29WithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTuples29WithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).FindAllTuples29WithResponse), varargs...)
}

// FindAllWithStream6WithResponse mocks base method.
func (m *MockClientWithResponsesInterface) FindAllWithStream6WithResponse(ctx context.Context, params *udl.FindAllWithStream6Params, reqEditors ...udl.RequestEditorFn) (*udl.FindAllWithStream6Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllWithStream6WithResponse", varargs...)
	ret0, _ := ret[0].(*udl.FindAllWithStream6Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllWithStream6WithResponse indicates an expected call of FindAllWithStream6WithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) FindAllWithStream6WithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllWithStream6WithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).FindAllWithStream6WithResponse), varargs...)
}

// FindAllWithStream7WithResponse mocks base method.
func (m *MockClientWithResponsesInterface) FindAllWithStream7WithResponse(ctx context.Context, params *udl.FindAllWithStream7Params, reqEditors ...udl.RequestEditorFn) (*udl.FindAllWithStream7Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllWithStream7WithResponse", varargs...)
	ret0, _ := ret[0].(*udl.FindAllWithStream7Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllWithStream7WithResponse indicates an expected call of FindAllWithStream7WithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) FindAllWithStream7WithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllWithStream7WithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).FindAllWithStream7WithResponse), varargs...)
}

// FindAllWithStream8WithResponse mocks base method.
func (m *MockClientWithResponsesInterface) FindAllWithStream8WithResponse(ctx context.Context, params *udl.FindAllWithStream8Params, reqEditors ...udl.RequestEditorFn) (*udl.FindAllWithStream8Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllWithStream8WithResponse", varargs...)
	ret0, _ := ret[0].(*udl.FindAllWithStream8Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllWithStream8WithResponse indicates an expected call of FindAllWithStream8WithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) FindAllWithStream8WithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllWithStream8WithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).FindAllWithStream8WithResponse), varargs...)
}

// GetFile1WithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetFile1WithResponse(ctx context.Context, id string, reqEditors ...udl.RequestEditorFn) (*udl.GetFile1Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFile1WithResponse", varargs...)
	ret0, _ := ret[0].(*udl.GetFile1Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile1WithResponse indicates an expected call of GetFile1WithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetFile1WithResponse(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile1WithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetFile1WithResponse), varargs...)
}

// Queryhelp26WithResponse mocks base method.
func (m *MockClientWithResponsesInterface) Queryhelp26WithResponse(ctx context.Context, reqEditors ...udl.RequestEditorFn) (*udl.Queryhelp26Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Queryhelp26WithResponse", varargs...)
	ret0, _ := ret[0].(*udl.Queryhelp26Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Queryhelp26WithResponse indicates an expected call of Queryhelp26WithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) Queryhelp26WithResponse(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Queryhelp26WithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).Queryhelp26WithResponse), varargs...)
}

// Queryhelp29WithResponse mocks base method.
func (m *MockClientWithResponsesInterface) Queryhelp29WithResponse(ctx context.Context, reqEditors ...udl.RequestEditorFn) (*udl.Queryhelp29Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Queryhelp29WithResponse", varargs...)
	ret0, _ := ret[0].(*udl.Queryhelp29Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Queryhelp29WithResponse indicates an expected call of Queryhelp29WithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) Queryhelp29WithResponse(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Queryhelp29WithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).Queryhelp29WithResponse), varargs...)
}

// Queryhelp30WithResponse mocks base method.
func (m *MockClientWithResponsesInterface) Queryhelp30WithResponse(ctx context.Context, reqEditors ...udl.RequestEditorFn) (*udl.Queryhelp30Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Queryhelp30WithResponse", varargs...)
	ret0, _ := ret[0].(*udl.Queryhelp30Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Queryhelp30WithResponse indicates an expected call of Queryhelp30WithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) Queryhelp30WithResponse(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Queryhelp30WithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).Queryhelp30WithResponse), varargs...)
}
